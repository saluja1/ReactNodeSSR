{"version":3,"sources":["Filter.js","App.js","serviceWorker.js","index.js"],"names":["Filter","props","getQuestions","axios","get","then","question","setState","questionBank","data","results","clickMe","event","target","value","state","alreadyAnswered","score","responses","answerOptions","id","answer","correct_answer","this","indexOf","push","incorrect_answers","answerOptionsArray","sort","className","onChange","type","name","htmlFor","Component","Quiz","fValue","setPage","handleClick","getPager","totalItems","ItemPerpage","currentPage","totalPages","Math","ceil","endPage","startIndex","endIndex","pages","Array","keys","map","i","console","log","startPage","slicedItem","pager","items","length","slice","onChangePage","Qindex","key","createAnswerOptionArray","index","onClick","answerClicked","page","Pindex","href","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","App","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2996129c.chunk.js","sourcesContent":["import React, {Component} from \"react\"; \nimport axios from 'axios';\nimport $ from \"jquery\";\nimport 'bootstrap/dist/css/bootstrap.min.css';  \n\n\nclass Filter extends Component { \n\n    constructor(props) { \n        super(props);\n        this.state = { \n          questionBank: [], \n          alreadyAnswered: [], \n          score: 0, \n          responses: 0 \n        }; \n        this.answerOptions = [];\n\n    };\n\n\n    getQuestions = () => {\n        axios.get('https://opentdb.com/api.php?amount=4')\n        .then(question => { \n          this.setState({questionBank: question.data.results}); \n        }); \n    \n    };\n\n    answerClicked(id, answer, correct_answer) {\n        // console.log(id, answer, correct_answer);\n        this.state.alreadyAnswered.indexOf(id);\n        if (this.state.alreadyAnswered.indexOf(id) != -1 ) {\n            return false;\n        }    \n\n        this.state.alreadyAnswered.push(id);\n        if (answer == correct_answer) {\n          this.setState({score: this.state.score+1}); \n        }\n    }\n\n\n    componentDidMount() { \n        this.getQuestions();\n    } \n\n    createAnswerOptionArray(incorrect_answers, correct_answer){\n        var answerOptionsArray = [];\n        answerOptionsArray = [...incorrect_answers, correct_answer];\n        this.answerOptions = answerOptionsArray.sort();\n        return;\n    }\n    \nclickMe = (event) => {\n    this.props.clickMe(event.target.value)\n}\n\n    render() { \n        return (\n                <div className=\"Filter\" onChange={this.clickMe}>\n                    <h5>Number of Questions:</h5>\n                    <input type=\"radio\" id=\"5\" name=\"numberofQuestion\" value=\"5\" />\n                    <label htmlFor=\"5\">5</label>\n                    <input type=\"radio\" id=\"10\" name=\"numberofQuestion\" value=\"10\"/>\n                    <label htmlFor=\"10\">10</label>\n                    <input type=\"radio\" id=\"20\" name=\"numberofQuestion\" value=\"20\"/>\n                    <label htmlFor=\"20\">20</label>\n                </div>    \n        );\n    }\n}    \nexport default Filter; \n","import React, {Component} from \"react\"; \nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';  \nimport $ from \"jquery\";\nimport Filter from './Filter';\n\nclass Quiz extends Component { \n\n    constructor() { \n        super(); \n        this.state = { \n          questionBank: [], \n          alreadyAnswered: [], \n          score: 0, \n          responses: 0,\n          slicedItem: [],\n          pages: [],\n          pager: {}\n        }; \n        this.answerOptions = []\n    };\n\n    onChangePage(slicedItem) {\n        // update state with new page of items\n        this.setState({ slicedItem: slicedItem });\n        console.log(this.state.slicedItem);\n    };\n\n    getQuestions = (fValue) => {\n        axios.get(\"https://opentdb.com/api.php?amount=\"+fValue)\n        .then(question => { \n            this.setState({questionBank: question.data.results}); \n        })\n        .then(() => { \n            this.setPage(1);\n        }); \n    };\n\n    answerClicked(id, answer, correct_answer) {\n        this.state.alreadyAnswered.indexOf(id);\n        if (this.state.alreadyAnswered.indexOf(id) != -1 ) {\n            return false;\n        }    \n\n        this.state.alreadyAnswered.push(id);\n        if (answer == correct_answer) {\n          this.setState({score: this.state.score+1}); \n        }\n    }\n\n    handleClick = (fValue) => {\n        this.getQuestions(fValue);\n    }\n\n\n    componentDidMount() { \n        this.getQuestions(5);\n    } \n\n    createAnswerOptionArray(incorrect_answers, correct_answer){\n        var answerOptionsArray = [];\n        answerOptionsArray = [...incorrect_answers, correct_answer];\n        this.answerOptions = answerOptionsArray.sort();\n        return;\n    }\n    \n    getPager = (totalItems, ItemPerpage, currentPage) => {\n\n        var totalPages = Math.ceil(totalItems / ItemPerpage);\n        var startPage = 1;\n        var endPage = totalPages;\n        var startIndex = (currentPage - 1) * ItemPerpage;\n        var endIndex = ((currentPage - 1) * ItemPerpage) + (ItemPerpage-1);\n\n        var pages = [...Array((endPage + 1) - startPage).keys()].map(i => startPage + i);\n        \n        console.log(pages)\n\n        this.setState({ pages: pages });\n\n        return {\n            totalItems: totalItems,\n            ItemPerpage: ItemPerpage,\n            currentPage: currentPage,\n            totalPages: totalPages,\n            startPage: startPage,\n            endPage: endPage,\n            startIndex: startIndex,\n            endIndex: endIndex,\n            pages: pages\n        }\n\n    }\n\n    setPage(currentPage) {\n        var items = this.state.questionBank;\n        var pager = this.state.pager;\n\n        if (currentPage < 1 || currentPage > pager.totalPages) {\n            return;\n        }\n\n        pager = this.getPager(items.length, 2, currentPage);\n        console.log(pager)\n\n        var slicedItem = items.slice(pager.startIndex, pager.endIndex + 1);\n\n        this.setState({ pager: pager });\n\n        console.log(slicedItem);\n        this.onChangePage(slicedItem);\n    }\n\n\n    render() { \n        var pager = this.state.pager;\n\n        return (\n            <div className=\"row\">\n                <div className=\"container-md\">                      \n                    Your Score = {this.state.score}\n\n                    <Filter clickMe={this.handleClick} ></Filter>\n\n\n                    {this.state.questionBank.length > 0 &&\n                        this.state.slicedItem.map( ({question, incorrect_answers, correct_answer}, Qindex) =>\n                            <div key={Qindex}>\n                                <h2>{question}</h2>\n                                {this.createAnswerOptionArray(incorrect_answers, correct_answer)}\n                                {this.answerOptions.map( (answer, index) =>\n                                    <button key={index} onClick={()=>this.answerClicked(Qindex, answer, correct_answer)}>{answer}</button>\n                                )}\n                            </div>\n                        )\n                    }\n\n                    {this.state.pages.map((page,Pindex) => (\n                        <a href=\"!#\" onClick={() => this.setPage(page)}>{page}</a>\n                    ))}\n                </div>\n            </div>    \n        );\n    }\n}    \nexport default Quiz; \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}